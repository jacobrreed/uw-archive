package model;

import java.util.Map;

/**
 * 
 * Bicycles can travel on streets and through lights and crosswalk lights, but they prefer to
 * travel on trails.
 * If the terrain in front of a bicycle is a trail, the bicycle always goes 
 * straight ahead in the direction it is
 * facing. Trails are guaranteed to be straight (horizontal or vertical) 
 * lines that end at streets, and you are
 * guaranteed that a bicycle will never start on a trail facing terrain it cannot traverse.
 * If a bicycle is not facing a trail, but there is a trail either to the left 
 * or to the right of the bicycle’s current
 * direction, then the bicycle turns to face the trail and moves in that direction. 
 * You may assume that the
 * map is laid out so that only one trail will neighbor a bicycle at any given time.
 * If there is no trail straight ahead, to the left, or to the right, the bicycle 
 * prefers to move straight ahead on
 * a street (or light or crosswalk light) if it can. If it cannot move straight ahead,
 * it turns left if possible; if
 * it cannot turn left, it turns right if possible. As a last resort, if none of 
 * these three directions is legal (all
 * not streets or lights or crosswalk lights), the bicycle turns around.
 * Bicycles ignore green lights.
 * Bicycles stop for yellow and red lights; if a traffic light or crosswalk light is
 * immediately ahead of the
 * bicycle and the light is not green, the bicycle stays still and does not move unless
 * a trail is to the left or
 * right. If a bicycle is facing a red or yellow light and there is a trail to the 
 * left or right, the bicycle will
 * turn to face the trail.
 * Collision behavior: A bicycle dies if it collides with a living truck, car, taxi, 
 * or ATV. It stays dead for 30
 * moves.
 * @author Jacob Reed
 * @version Apr 14, 2017
 *
 */
public class Bicycle implements Vehicle {
    /** Is vehicle alive or not? */
    private boolean myAlive;
    /** Pokes for revival. */
    private int myPokes;
    /** Direction. */
    private Direction myDirection;
    /** X value. */
    private int myX;
    /** Y value. */
    private int myY;
    
    @Override
    public boolean canPass(final Terrain theTerrain, final Light theLight) {
        // TODO Auto-generated method stub
        return false;
    }

    @Override
    public Direction chooseDirection(final Map<Direction, Terrain> theNeighbors) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public void collide(final Vehicle theOther) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public int getDeathTime() {
        // TODO Auto-generated method stub
        return 0;
    }

    @Override
    public String getImageFileName() {
        String result = "";
        if (myAlive) {
            result = "bicycle.gif";
        } else {
            result = "bicycle_dead.gif";
        }
        return result;
    }

    @Override
    public Direction getDirection() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public int getX() {
        return myX;
    }

    @Override
    public int getY() {
        return myY;
    }

    @Override
    public boolean isAlive() {
        return myAlive;
    }

    @Override
    public void poke() {
        myPokes++;
    }

    @Override
    public void reset() {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void setDirection(final Direction theDir) {
        myDirection = theDir;
    }

    @Override
    public void setX(final int theX) {
        myX = theX;
    }

    @Override
    public void setY(final int theY) {
        myY = theY;
    }

}
