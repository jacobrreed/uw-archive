package view;



import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.BorderFactory;
import javax.swing.InputMap;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import javax.swing.Timer;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import model.Board;


/**
 * 
 * Tetris GUI.
 * @author Jacob Reed
 * @version May 19, 2017
 *
 */
public class TetrisGUI extends JPanel implements Observer {

    /**Generated SUID. */
    private static final long serialVersionUID = -4763324919600478629L;
    /**Default window size. */
    private static final Dimension WINDOW_DIM = new Dimension(600, 650);
    /** Timer Init default. */
    private static final int TIMER_INIT = 1000;
    /** Timer Delay Shift. */
    private static final int TIMER_SHIFT = 100;
    /** Action name. */
    private static final String GAME_OVER = "GAME OVER!";
    /** Action name. */
    private static final String MOVE_LEFT = "Left";
    /** Action name. */
    private static final String MOVE_RIGHT = "Right";
    /** Action name. */
    private static final String MOVE_ROTATE = "Rotate";
    /** Action name. */
    private static final String MOVE_DOWN = "Down";
    /** Action name. */
    private static final String MOVE_DROP = "Drop";
    /** Action name. */
    private static final String PAUSE = "Pause";
    /** Action name. */
    private static final String RESUME = "Resume";
    /**Action name. */
    private static final String NEWGAME = "New";
    /**Action name. */
    private static final String ENDGAME = "End";
    /** String array for keybinds. */
    private ArrayList<Integer> myLefts;
    /** String array for keybinds. */
    private ArrayList<Integer> myRights;
    /** String array for keybinds. */
    private ArrayList<Integer> myDowns;
    /** String array for keybinds. */
    private ArrayList<Integer> myRotates;
    /** String array for keybinds. */
    private ArrayList<Integer> myDrops;
    /** Frame.*/
    private JFrame myFrame;
    /**Right Side Panel. */
    private JPanel myRightPanel;
    /**Right Side Bottom Panel. */
    private JPanel myRightBottomPanel;
    /**Right Side Bottom InnerPanel. */
    private JPanel myRightBottomInnerPanel;
    /**Right Side Top Panel. */
    private JPanel myRightTopPanel;
    /**Game Panel. */
    private GamePanel myGamePanel;
    /** Next piece panel. */
    private NextPiecePanel myNextPanel;
    /** Information panel. */
    private KeybindsInfo myInfoPanel;
    /** Configuration Panel. */
    private GameInfo myConfigPanel;
    /** Menu Bar. */
    private JMenuBar myMenuBar;
    /**Score info. */
    private ScoreInfo myScoreInfo;
    /** Board. */
    private Board myBoard;
    /** Game Status, wrapper because of object return from observable. */
    private Boolean myGameStatus;
    /** Timer. */
    private Timer myTimer;
    /**Root pane for focus. */
    private JRootPane myRootPane;
    /** New game. */
    private JMenuItem myNewGameItem;
    /** Map name of Panel focus. */
    private int myMapName;
    /** Input Map for keybinds. */
    private InputMap myInputMap;
    /** Action map for keybinds. */
    private ActionMap myActionMap;
    /**Pause item. */
    private JMenuItem myPauseItem;
    /** Resume Item. */
    private JMenuItem myResumeItem;
    /**End Game item. */
    private JMenuItem myEndItem;
    /** Current level. */
    private int myCurrentLevel;
    /** Timer Delay Changer. */
    private ArrayList<Integer> myTimerDelay;

    /**
     * Constructor.
     */
    public TetrisGUI() {
        myFrame = new JFrame();
        myFrame.setLayout(new BorderLayout());
        myGameStatus = false; 
        myLefts = new ArrayList<Integer>();
        myRights = new ArrayList<Integer>();
        myRotates = new ArrayList<Integer>();
        myDowns = new ArrayList<Integer>();
        myDrops = new ArrayList<Integer>();
        genTimerDelays();
        myCurrentLevel = 1;
    }
    
    /**
     * Ends game.
     */
    private void endGame() {
        if (myGameStatus) {
            myGameStatus = false;
            pause();
            JOptionPane.showMessageDialog(this, GAME_OVER,
                                          GAME_OVER, JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Generated timer delays per level.
     * 10 shifts drops the delay to 0,
     * any more shifts then that in delay would cause negative.
     */
    private void genTimerDelays() {
        final int shift = 10;
        myTimerDelay = new ArrayList<Integer>();
        for (int i = 0; i < shift; i++) {
            myTimerDelay.add(i, TIMER_INIT - (TIMER_SHIFT * i));
        }
    }
    
    /**
     * Initializes keybinds.
     */
    private void initKeybinds() {
        myLefts.add(KeyEvent.VK_A);
        myLefts.add(KeyEvent.VK_LEFT);
        
        myRights.add(KeyEvent.VK_D);
        myRights.add(KeyEvent.VK_RIGHT);
        
        myRotates.add(KeyEvent.VK_W);
        myRotates.add(KeyEvent.VK_UP);
        
        myDowns.add(KeyEvent.VK_S);
        myDowns.add(KeyEvent.VK_DOWN);
        
        myDrops.add(KeyEvent.VK_SPACE);
    }
    
    /**
     * Starts new game, only if game is over.
     */
    private void newGame() {
        if (myGameStatus) {
            pause();
            final Object[] options = {"OK"};
            final int n = JOptionPane.showOptionDialog(this,
                           "HOW DARE YOU TRY TO START A NEW GAME BEFORE FINISHING THIS ONE!",
                           "WHAT ARE YOU DOING?!",
                           JOptionPane.PLAIN_MESSAGE,
                           JOptionPane.QUESTION_MESSAGE,
                           null,
                           options,
                           options[0]);
            System.out.println(n);
            if (n == 0) {
                resume();
            }
        } else {
            myBoard.newGame();
            myTimer.start();
            myActionMap.get(MOVE_DOWN).setEnabled(true);
            myActionMap.get(MOVE_DROP).setEnabled(true);
            myActionMap.get(MOVE_ROTATE).setEnabled(true);
            myActionMap.get(MOVE_LEFT).setEnabled(true);
            myActionMap.get(MOVE_RIGHT).setEnabled(true);
            myActionMap.get(MOVE_DOWN).setEnabled(true);
            myGameStatus = true;
            myGamePanel.setStatus(myGameStatus); 
        }
        
    }
    
    /**
     * Pauses game.
     */
    private void pause() {
        myTimer.stop();
        myActionMap.get(MOVE_DOWN).setEnabled(false);
        myActionMap.get(MOVE_DROP).setEnabled(false);
        myActionMap.get(MOVE_ROTATE).setEnabled(false);
        myActionMap.get(MOVE_LEFT).setEnabled(false);
        myActionMap.get(MOVE_RIGHT).setEnabled(false);
        myActionMap.get(MOVE_DOWN).setEnabled(false);
        
    }
    
    /**
     * Resumes Game.
     */
    private void resume() {
        myTimer.restart();
        myActionMap.get(MOVE_DOWN).setEnabled(true);
        myActionMap.get(MOVE_DROP).setEnabled(true);
        myActionMap.get(MOVE_ROTATE).setEnabled(true);
        myActionMap.get(MOVE_LEFT).setEnabled(true);
        myActionMap.get(MOVE_RIGHT).setEnabled(true);
        myActionMap.get(MOVE_DOWN).setEnabled(true);
    }
    
    /**
     * Sets keybinds for menu actions.
     */
    private void setMenuKeybinds() {
        //NEW GAME
        myInputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0), NEWGAME);
        //Pause
        myInputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0), PAUSE);
        
        //Resume
        myInputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0), RESUME);
        
        //END GAME
        myInputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0), ENDGAME);
        
        
        //NEW GAME
        myActionMap.put(NEWGAME, new AbstractAction() {
            /**Generated SUID. */
            private static final long serialVersionUID = 2147959870417233369L;
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                newGame(); } }); 
        
        //Pause
        myActionMap.put(PAUSE, new AbstractAction() {
            /**Generated SUID. */
            private static final long serialVersionUID = -1285134797478274697L;
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                pause(); } });
        
        //Resume
        myActionMap.put(RESUME, new AbstractAction() {
            /**Generated SUID. */
            private static final long serialVersionUID = 2147959870417233369L;
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                resume(); } });  
        
        //END GAME
        myActionMap.put(ENDGAME, new AbstractAction() {
            /**Generated SUID. */
            private static final long serialVersionUID = 2147959870417233369L;
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                endGame(); } }); 

    }
    
    /**
     * Sets Keybinds for game.
     * @param theLefts Array of string
     * @param theRights Array of string
     * @param theRotates Array of string
     * @param theDowns Array of string
     * @param theDrops String of drop.
     */ 
    protected void setKeybinds(final ArrayList<Integer> theLefts, 
                               final ArrayList<Integer> theRights,
                             final ArrayList<Integer> theRotates,
                             final ArrayList<Integer> theDowns,
                             final ArrayList<Integer> theDrops) {
        //Focus
        myRootPane = myFrame.getRootPane();
        myMapName = JComponent.WHEN_IN_FOCUSED_WINDOW;
        myInputMap = myRootPane.getInputMap(myMapName);
        //Add keystroke to map
        //LEFT
        for (Integer i : theLefts) {
            myInputMap.put(KeyStroke.getKeyStroke(i, 0), MOVE_LEFT);
        }
        //RIGHT
        for (Integer i : theRights) {
            myInputMap.put(KeyStroke.getKeyStroke(i, 0), MOVE_RIGHT);
        }
        //ROTATE
        for (Integer i : theRotates) {
            myInputMap.put(KeyStroke.getKeyStroke(i, 0), MOVE_ROTATE);
        }
        //DOWN
        for (Integer i : theDowns) {
            myInputMap.put(KeyStroke.getKeyStroke(i, 0), MOVE_DOWN);
        }
        //DROP
        for (Integer i : theDrops) {
            myInputMap.put(KeyStroke.getKeyStroke(i, 0), MOVE_DROP);
        }
        
        
        //Get action map for panel
        myActionMap = myRootPane.getActionMap();
        
        //Put Input maps into action maps
        
        //LEFT
        myActionMap.put(MOVE_LEFT, new AbstractAction() {
            /**Generated SUID. */
            private static final long serialVersionUID = -1285134797478274697L;
            @Override
            public void actionPerformed(final ActionEvent theAction) {
                if (myGameStatus) {
                    myBoard.left();
                }
            } });
        //RIGHT
        myActionMap.put(MOVE_RIGHT, new AbstractAction() {
            /**Generated SUID. */
            private static final long serialVersionUID = 2147959870417233369L;
            @Override
            public void actionPerformed(final ActionEvent theAction) {
                if (myGameStatus) {
                    myBoard.right();
                }
            } });
        //ROTATE
        myActionMap.put(MOVE_ROTATE, new AbstractAction() {
            /**Generated SUID. */
            private static final long serialVersionUID = -2520335842212904459L;
            @Override
            public void actionPerformed(final ActionEvent theAction) {
                if (myGameStatus) {
                    myBoard.rotateCW(); 
                }
            } });
        //DOWN
        myActionMap.put(MOVE_DOWN, new AbstractAction() {
            //**Generated SUID. */
            private static final long serialVersionUID = -6061782707376461597L;
            @Override
            public void actionPerformed(final ActionEvent theAction) {
                if (myGameStatus) {
                    myBoard.down();
                }
                } });
        //DROP
        myActionMap.put(MOVE_DROP, new AbstractAction() {
            /**Generated SUID. */
            private static final long serialVersionUID = 8429321738785310841L;
            @Override
            public void actionPerformed(final ActionEvent theAction) {
                if (myGameStatus) {
                    myBoard.drop();
                }
            } });
        //Get focus just to make sure keybinds work properly
        this.requestFocus();
    }
    
    /**
     * Setups config panel.
     */
    private void setupGameInfoPanel() {
        myConfigPanel = new GameInfo();
        final Border blackline = BorderFactory.createLineBorder(Color.BLACK);
        final TitledBorder title = BorderFactory.createTitledBorder(blackline, 
                        "Game Information", TitledBorder.LEFT, TitledBorder.TOP,
                        null, Color.BLACK);
        myConfigPanel.setBorder(title);
        myRightBottomInnerPanel.add(myConfigPanel, BorderLayout.SOUTH);
    }
    
    /**
     * Setups board.
     */
    private void setupGamePanel() {
        myGamePanel = new GamePanel();
        myFrame.add(myGamePanel, BorderLayout.WEST);
    }
    
    /**
     * Setups info panel.
     */
    private void setupKeybindPanel() {
        final Border blackline = BorderFactory.createLineBorder(Color.BLACK);
        final TitledBorder title = BorderFactory.createTitledBorder(blackline, "Keybinds",
                                                                    TitledBorder.LEFT, 
                                                                    TitledBorder.TOP,
                                                                    null, Color.BLACK);
        myInfoPanel.setBorder(title);
        myRightBottomPanel.add(myInfoPanel, BorderLayout.NORTH);  
    }

    /**
     * Setups layout.
     */
    private void setupLayout() {
        myRightPanel = new JPanel();
        myRightPanel.setLayout(new BorderLayout());
        myRightTopPanel = new JPanel();
        myRightTopPanel.setLayout(new BorderLayout());
        myRightBottomPanel = new JPanel();
        myRightBottomPanel.setLayout(new BorderLayout());
        myRightBottomInnerPanel = new JPanel();
        myRightBottomInnerPanel.setLayout(new BorderLayout());
        myFrame.setTitle("Tetris");   
        myFrame.setLocationRelativeTo(null);
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myFrame.add(myRightPanel, BorderLayout.CENTER);
        myFrame.setPreferredSize(WINDOW_DIM);
        myRightPanel.add(myRightTopPanel, BorderLayout.NORTH);
        myRightPanel.add(myRightBottomPanel, BorderLayout.CENTER);
        myRightBottomPanel.add(myRightBottomInnerPanel, BorderLayout.SOUTH);
        setupGamePanel();
        setupNextPanel();
        setupGameInfoPanel();
        setupMenuBar();
        setupScoreInfo();
        myFrame.pack();
        myFrame.setResizable(false);
        myFrame.setVisible(true);
    }
    
    /**
     * Setups menu bar.
     */
    private void setupMenuBar() {
        //Main menu
        myMenuBar = new JMenuBar();
        setupFileBar();
        setupExtraBar();
        myFrame.add(myMenuBar, BorderLayout.NORTH);
    }
    

    
    /**
     * Setups extra credit options.
     */
    private void setupExtraBar() {
        final JMenu extraMenu = new JMenu("Extra");
        myMenuBar.add(extraMenu);
        //GRID
        final JCheckBoxMenuItem gridItem = new JCheckBoxMenuItem("Grid");
        extraMenu.add(gridItem);
        gridItem.addActionListener(e -> {
            myGamePanel.setGrid(gridItem.isSelected()); });
        
        //Multiplayer
    }
    
    /**
     * Setups File Option Menu.
     */
    private void setupFileBar() {
      //File
        final JMenu fileMenu = new JMenu("File");
        myMenuBar.add(fileMenu);
        //New Game
        myNewGameItem = new JMenuItem("New Game (F1)");
        fileMenu.add(myNewGameItem);
        myNewGameItem.addActionListener(e -> {
            newGame();
        });
        //Pause
        myPauseItem = new JMenuItem("Pause (F2)");
        fileMenu.add(myPauseItem);
        myPauseItem.addActionListener(e -> {
            pause();
        });
        //Resume
        myResumeItem = new JMenuItem("Resume (F3)");
        fileMenu.add(myResumeItem);
        myResumeItem.addActionListener(e -> {
            resume();
        });
        //END GAME
        myEndItem = new JMenuItem("End Game (F4)");
        fileMenu.add(myEndItem);
        myEndItem.addActionListener(e -> {
            endGame();
        });
    }
    /**
     * Setups the next piece panel.
     */
    private void setupNextPanel() {
        myNextPanel = new NextPiecePanel();
        final Border blackline = BorderFactory.createLineBorder(Color.BLACK);
        final TitledBorder title = BorderFactory.createTitledBorder(blackline, "Next Piece",
                                                                    TitledBorder.LEFT, 
                                                                    TitledBorder.TOP,
                                                                    null, Color.BLACK);
        myNextPanel.setBorder(title);
        myRightTopPanel.add(myNextPanel, BorderLayout.CENTER);
    }
    
    /**
     * Setups score info panel.
     */
    private void setupScoreInfo() {
        myScoreInfo = new ScoreInfo();
        final Border blackline = BorderFactory.createLineBorder(Color.BLACK);
        final TitledBorder title = BorderFactory.createTitledBorder(blackline, 
                                                                "Level/Score/Lines Cleared",
                                                                 TitledBorder.LEFT, 
                                                                 TitledBorder.TOP,
                                                                 null, Color.BLACK);
        myScoreInfo.setBorder(title);
        myRightBottomInnerPanel.add(myScoreInfo, BorderLayout.NORTH);
    }
    
    /**
     * Starts GUI.
     */
    public void start() {
        //Timer init.
        myTimer = new Timer(TIMER_INIT, new TimerListener());
        //Layout
        setupLayout();
        //KEYBIND Panel
        myInfoPanel = new KeybindsInfo();
        setupKeybindPanel();
        //Initialize keybinds and keybind info.
        initKeybinds();
        setKeybinds(myLefts, myRights, myRotates,
                    myDowns, myDrops);
        setMenuKeybinds();
        //Observers
        myBoard = new Board();
        myBoard.addObserver(myGamePanel);  
        myBoard.addObserver(myConfigPanel);
        myBoard.addObserver(myScoreInfo);
        myBoard.addObserver(myNextPanel);
        myBoard.addObserver(this);
    }
    

    @Override
    public void update(final Observable theObservable, final Object theObject) {
        //If boolean return (Game status)
        if (theObject instanceof Boolean) {
            myGameStatus = (Boolean) theObject;
            JOptionPane.showMessageDialog(this, GAME_OVER,
                                          GAME_OVER, JOptionPane.ERROR_MESSAGE);
            myTimer.stop();
        }
    }

    /**
     * 
     * Inner class for timer listener.
     * @author Jacob Reed
     * @version May 19, 2017
     *
     */
    private class TimerListener implements ActionListener {
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            myBoard.step();
            myCurrentLevel = myScoreInfo.getLevel();
            myTimer.setDelay(myTimerDelay.get(myCurrentLevel));
        }
    }
}
